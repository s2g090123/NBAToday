apply plugin: 'com.hiya.jacoco-android'

jacoco {
    toolVersion = "$jacoco_version"
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "$jacoco_version"
            }
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes += ["jdk.internal.*"]
}

task generateJacocoTestReport(
        type: JacocoReport
) {
    combineJacocoTestReport(generateJacocoTestReport)
}

task runTestsAndGenerateJacocoTestReport(
        type: JacocoReport,
        dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"],
) {
    combineJacocoTestReport(runTestsAndGenerateJacocoTestReport)
}

def combineJacocoTestReport(JacocoReport reportTask) {
    reportTask.reports {
        html.enabled true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/SemanticsPropertyKeyKt.class', // Compose Semantics
            '**/KoinModuleKt*.class', // Koin Module
            '**/StatsNbaService$*.class' // StatsNbaService
    ]
    def classDirs = [
            fileTree(dir: "$buildDir/intermediates/classes/debug", excludes: excludes),
            fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: excludes)
    ]
    reportTask.classDirectories.from = classDirs

    def sourceDirs = [
            "$projectDir/src/main/java"
    ]
    reportTask.sourceDirectories.from = sourceDirs

    def execDataFiles = fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/**/*coverage.ec"
    ])
    reportTask.executionData.from = execDataFiles
}