plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'kotlin-kapt'
}
apply from: "../buildscripts/jacoco.gradle"
apply from: "../buildscripts/detekt.gradle"
apply from: "../buildscripts/ktlint.gradle"

def getOutputFileName(outputFileName, versionName) {
  String fileName = outputFileName.toLowerCase()
  String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1)
  if (fileExtension == 'apk' || fileExtension == 'aab') {
    return "NBAToday.${fileExtension}"
  } else {
    return outputFileName
  }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('keystore.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
  compileSdk 33

  defaultConfig {
    applicationId "com.jiachian.nbatoday"
    minSdk 21
    targetSdk 32
    versionCode 2
    versionName "1.1"

    testInstrumentationRunner "com.jiachian.nbatoday.AndroidTestRunner"
    vectorDrawables {
      useSupportLibrary true
    }
  }

  signingConfigs {
    release {
      keyAlias keystoreProperties['keyAlias']
      keyPassword keystoreProperties['keyAlias.password']
      storeFile keystoreProperties['keystore'] ? file(keystoreProperties['keystore']) : null
      storePassword keystoreProperties['keystore.password']
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

      android.applicationVariants.all { variant ->
        variant.outputs.all {
          outputFileName = getOutputFileName(outputFileName, variant.versionName)
        }
      }
    }
    debug {
      testCoverageEnabled true
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = '1.8'
  }

  buildFeatures {
    compose true
  }

  composeOptions {
    kotlinCompilerExtensionVersion compose_version
  }

  packagingOptions {
    resources {
      excludes += '/META-INF/{AL2.0,LGPL2.1}'
      excludes += '/META-INF/*.md'
    }
  }

  lintOptions {
    error("VisibleForTests")
    abortOnError true
  }

  testOptions {
    animationsDisabled = true
  }
}

dependencies {

  debugImplementation 'androidx.test:core-ktx:1.5.0'
  implementation 'androidx.core:core-ktx:1.9.0'

  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.3'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

  // compose
  implementation 'androidx.activity:activity-compose:1.6.1'
  implementation "androidx.compose.ui:ui:$compose_version"
  implementation "androidx.compose.material:material:$compose_version"
  implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
  androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
  debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
  debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
  implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
  implementation "androidx.navigation:navigation-compose:$nav_version"
  implementation "com.google.accompanist:accompanist-pager:0.27.0"
  implementation "com.google.accompanist:accompanist-flowlayout:0.28.0"

  // lifecycle
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

  // coroutine
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

  // retrofit
  implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
  implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

  // room
  implementation "androidx.room:room-runtime:$room_version"
  implementation "androidx.room:room-ktx:$room_version"
  annotationProcessor "androidx.room:room-compiler:$room_version"
  kapt "androidx.room:room-compiler:$room_version"

  // koin
  implementation "io.insert-koin:koin-android:$koin_version"
  implementation "io.insert-koin:koin-androidx-compose:$koin_version"

  // coil
  implementation "io.coil-kt:coil-compose:$coil_version"
  implementation "io.coil-kt:coil-svg:$coil_version"

  // gson
  implementation 'com.google.code.gson:gson:2.10'

  // preference datastore
  implementation "androidx.datastore:datastore-preferences:1.0.0"

  // testing
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
  testImplementation "io.mockk:mockk:$mockk_version"
  testImplementation "io.insert-koin:koin-test-junit4:$koin_version"

  // android testing
  androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
  androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
  androidTestImplementation "io.mockk:mockk-android:$mockk_version"
  androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
}

// Rename generated aab
tasks.whenTaskAdded { task ->
  def taskName = task.name
  //Skip some unnecessary tasks
  if (taskName.startsWith("bundle") && taskName.endsWith("Release")) {
    def renameTaskName = "rename${task.name.capitalize()}Aab"
    def flavor = taskName.substring("bundle".length())
    def versionName = android.defaultConfig.versionName
    def outputName = getOutputFileName(".aab", versionName)
    tasks.create(renameTaskName) {
      def path = "${rootDir}/../build/app/outputs/bundle/${flavor}"
      def originalFile = "$path/app-release.aab"
      doLast {
        if (file("$originalFile").exists()) {
          ant.move file: "$originalFile", tofile: "$path/${outputName}"
        }
      }
    }
    task.finalizedBy(renameTaskName)
  }
}
